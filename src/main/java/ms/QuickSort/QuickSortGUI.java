package ms.QuickSort;

import ms.floyd.Floyd;
import ms.sort.Sort;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

import javax.swing.*;
import java.util.Arrays;

import static week01.Lab1GUI.fillArray;

public class QuickSortGUI extends JFrame {

    /**
     * Creates new form GCD_GUI
     */
    public QuickSortGUI() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jLabel1 = new JLabel();
        num1 = new JTextField();
        calcBtn = new JButton();
        plotBtn = new JButton();
        jSeparator1 = new JSeparator();
        jLabel3 = new JLabel();
        result = new JLabel();
        jLabel4 = new JLabel();
        resTime = new JLabel();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setTitle("GCD");
        setBackground(new java.awt.Color(204, 204, 255));
        setForeground(new java.awt.Color(153, 255, 255));

        jLabel1.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 102, 102));
        jLabel1.setText("Array seperated by space:");

        calcBtn.setBackground(new java.awt.Color(204, 204, 204));
        calcBtn.setFont(new java.awt.Font("Sitka Subheading", 1, 12)); // NOI18N
        calcBtn.setForeground(new java.awt.Color(0, 102, 102));
        calcBtn.setText("Sort");
        calcBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calcBtnActionPerformed(evt);
            }
        });

        plotBtn.setBackground(new java.awt.Color(204, 204, 204));
        plotBtn.setFont(new java.awt.Font("Sitka Subheading", 1, 12)); // NOI18N
        plotBtn.setForeground(new java.awt.Color(0, 102, 102));
        plotBtn.setText("plot");
        plotBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plotBtnActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 102, 102));
        jLabel3.setText("Result:");

        result.setFont(new java.awt.Font("Trebuchet MS", 2, 12)); // NOI18N
        result.setForeground(new java.awt.Color(255, 0, 0));
        result.setText(" ");

        jLabel4.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 102, 102));
        jLabel4.setText("Time:");

        resTime.setFont(new java.awt.Font("Trebuchet MS", 2, 12)); // NOI18N
        resTime.setForeground(new java.awt.Color(255, 0, 0));
        resTime.setText(" ");

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addComponent(num1)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel1, GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
                                                .addGap(141, 141, 141))
                                        .addComponent(calcBtn, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(plotBtn, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jSeparator1)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(10, 10, 10)
                                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(jLabel4, GroupLayout.PREFERRED_SIZE, 54, GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(resTime, GroupLayout.PREFERRED_SIZE, 54, GroupLayout.PREFERRED_SIZE)
                                                                .addGap(0, 0, Short.MAX_VALUE))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(jLabel3, GroupLayout.PREFERRED_SIZE, 54, GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(result, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addComponent(jLabel1)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(num1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addGap(69, 69, 69)
                                .addComponent(calcBtn)
                                .addGap(78, 78, 78)
                                .addComponent(jSeparator1, GroupLayout.PREFERRED_SIZE, 10, GroupLayout.PREFERRED_SIZE)
                                .addGap(27, 27, 27)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel3)
                                                .addGap(0, 35, Short.MAX_VALUE))
                                        .addComponent(result, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel4)
                                        .addComponent(resTime))
                                .addGap(30, 30, 30)
                                .addComponent(plotBtn)
                                .addContainerGap())
        );

        pack();
    }// </editor-fold>

    private void calcBtnActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        String[] s = num1.getText().split(" ");
        int[] a = new int[s.length];
        for (int i = 0; i < a.length; i++) {
            a[i] = Integer.parseInt(s[i]);
        }


        long begien = System.currentTimeMillis();
        QuickSort quickSort = new QuickSort(a);
        quickSort.quicksort(0, a.length - 1);
        resTime.setText((System.currentTimeMillis() - begien) + " millis");
        result.setText(Arrays.toString(a));


    }

    private void plotBtnActionPerformed(java.awt.event.ActionEvent evt) {

        XYSeries series = new XYSeries("XYGraph");
        // Generate 20 arrays with random values
        for (int i = 1; i <= 30; i++) {
            int[] a = new int[i * 500];
            fillRandomArray(a);
            long start = System.nanoTime();
            QuickSort quickSort = new QuickSort(a);
            quickSort.quicksort(0, a.length - 1);
            long end = System.nanoTime();
            long time = end - start;
            series.add(a.length, time);
        }

        // Add the series to your data set
        XYSeriesCollection dataset = new XYSeriesCollection();

        dataset.addSeries(series);
        // Generate the graph
        JFreeChart chart = ChartFactory.createXYLineChart(
                "Sorting", // Title
                "Size", // x-axis Label
                "Time", // y-axis Label
                dataset, // Dataset
                PlotOrientation.VERTICAL, // Plot Orientation
                true, // Show Legend
                true, // Use tooltips
                false // Configure chart to generate URLs?
        );
        // we put the chart into a panel
        ChartPanel chartPanel = new ChartPanel(chart);
        // default size

        chartPanel.setPreferredSize(
                new java.awt.Dimension(600, 370));
        // add it to our application
        JFrame plotFrame = new JFrame("Plot");

        plotFrame.setContentPane(chartPanel);

        plotFrame.setSize(
                600, 600);
        plotFrame.setVisible(
                true);
    }

    public static void fillRandomArray(int[] a) {
        for (int i = 0; i < a.length; i++) {
            a[i] = (int) (50 + 10 * Math.random());
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(QuickSortGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(QuickSortGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(QuickSortGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(QuickSortGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new QuickSortGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private JButton calcBtn;
    private JLabel jLabel1;
    private JLabel jLabel3;
    private JLabel jLabel4;
    private JSeparator jSeparator1;
    private JTextField num1;
    private JButton plotBtn;
    private JLabel resTime;
    private JLabel result;
    // End of variables declaration

}
